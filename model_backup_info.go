/*
Backup Management API

Management endpoint to query, take, and delete backups of Zeebe.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camunda_backup_clients

import (
	"encoding/json"
)

// checks if the BackupInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupInfo{}

// BackupInfo Detailed status of a backup. The aggregated state is computed from the backup state of each partition as: - If the backup of all partitions is in state 'COMPLETED', then the overall state is 'COMPLETED'. - If one is 'FAILED', then the overall state is 'FAILED'. - Otherwise, if one is 'DOES_NOT_EXIST', then the overall state is 'INCOMPLETE'. - Otherwise, if one is 'IN_PROGRESS', then the overall state is 'IN_PROGRESS'. 
type BackupInfo struct {
	BackupId int64 `json:"backupId"`
	State StateCode `json:"state"`
	// Reason for failure if the state is 'FAILED'
	FailureReason *string `json:"failureReason,omitempty"`
}

// NewBackupInfo instantiates a new BackupInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupInfo(backupId int64, state StateCode) *BackupInfo {
	this := BackupInfo{}
	this.BackupId = backupId
	this.State = state
	return &this
}

// NewBackupInfoWithDefaults instantiates a new BackupInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupInfoWithDefaults() *BackupInfo {
	this := BackupInfo{}
	return &this
}

// GetBackupId returns the BackupId field value
func (o *BackupInfo) GetBackupId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupId
}

// GetBackupIdOk returns a tuple with the BackupId field value
// and a boolean to check if the value has been set.
func (o *BackupInfo) GetBackupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupId, true
}

// SetBackupId sets field value
func (o *BackupInfo) SetBackupId(v int64) {
	o.BackupId = v
}

// GetState returns the State field value
func (o *BackupInfo) GetState() StateCode {
	if o == nil {
		var ret StateCode
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *BackupInfo) GetStateOk() (*StateCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *BackupInfo) SetState(v StateCode) {
	o.State = v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *BackupInfo) GetFailureReason() string {
	if o == nil || isNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupInfo) GetFailureReasonOk() (*string, bool) {
	if o == nil || isNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *BackupInfo) HasFailureReason() bool {
	if o != nil && !isNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *BackupInfo) SetFailureReason(v string) {
	o.FailureReason = &v
}

func (o BackupInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: backupId is readOnly
	// skip: state is readOnly
	if !isNil(o.FailureReason) {
		toSerialize["failureReason"] = o.FailureReason
	}
	return toSerialize, nil
}

type NullableBackupInfo struct {
	value *BackupInfo
	isSet bool
}

func (v NullableBackupInfo) Get() *BackupInfo {
	return v.value
}

func (v *NullableBackupInfo) Set(val *BackupInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupInfo(val *BackupInfo) *NullableBackupInfo {
	return &NullableBackupInfo{value: val, isSet: true}
}

func (v NullableBackupInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


