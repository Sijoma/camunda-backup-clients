/*
Backup Management API

Management endpoint to query, take, and delete backups of Zeebe.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package camunda_backup_clients

import (
	"encoding/json"
)

// checks if the TakeBackupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TakeBackupRequest{}

// TakeBackupRequest Request body for take backup
type TakeBackupRequest struct {
	// The ID of the backup to be taken
	BackupId int64 `json:"backupId"`
}

// NewTakeBackupRequest instantiates a new TakeBackupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTakeBackupRequest(backupId int64) *TakeBackupRequest {
	this := TakeBackupRequest{}
	this.BackupId = backupId
	return &this
}

// NewTakeBackupRequestWithDefaults instantiates a new TakeBackupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTakeBackupRequestWithDefaults() *TakeBackupRequest {
	this := TakeBackupRequest{}
	return &this
}

// GetBackupId returns the BackupId field value
func (o *TakeBackupRequest) GetBackupId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupId
}

// GetBackupIdOk returns a tuple with the BackupId field value
// and a boolean to check if the value has been set.
func (o *TakeBackupRequest) GetBackupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupId, true
}

// SetBackupId sets field value
func (o *TakeBackupRequest) SetBackupId(v int64) {
	o.BackupId = v
}

func (o TakeBackupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TakeBackupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupId"] = o.BackupId
	return toSerialize, nil
}

type NullableTakeBackupRequest struct {
	value *TakeBackupRequest
	isSet bool
}

func (v NullableTakeBackupRequest) Get() *TakeBackupRequest {
	return v.value
}

func (v *NullableTakeBackupRequest) Set(val *TakeBackupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTakeBackupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTakeBackupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTakeBackupRequest(val *TakeBackupRequest) *NullableTakeBackupRequest {
	return &NullableTakeBackupRequest{value: val, isSet: true}
}

func (v NullableTakeBackupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTakeBackupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


